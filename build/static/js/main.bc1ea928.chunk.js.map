{"version":3,"sources":["index.js"],"names":["BOARD_SIZE","Square","props","isFinalPlay","finalPlay","selectedCol","col","selectedRow","row","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","i","_this","this","key","Math","floor","squares","_this2","Array","fill","map","eachValue","index","subSquares","eachSubValue","subIndex","renderSquare","React","Component","Game","_this3","Object","_home_ec2_user_environment_tictactoe_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_home_ec2_user_environment_tictactoe_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_home_ec2_user_environment_tictactoe_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","stepNumber","xIsNext","historyIsAsc","horizontalLines","verticalLines","crossLines","lines","concat","_home_ec2_user_environment_tictactoe_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","judge","forEach","eachLine","cellIsFilled","targetCell","allCellIsSame","filter","eachCell","length","every","clickableSquares","filteredLines","includes","slice","calculateWinner","square","avoidClickNumber","getAvoidNumber","clickNumber","random","getNextPlayer","setState","_this4","setTimeout","computedPlay","step","_this5","current","winner","moves","move","desc","jumpTo","sortedMoves","reverse","status","resetGame","toggleHistory","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bc1ea928.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst BOARD_SIZE = 3;\n\nfunction Square(props) {\n    const isFinalPlay =\n        props.finalPlay != null && props.finalPlay.selectedCol === props.col && props.finalPlay.selectedRow === props.row;\n    return (\n        <button className={isFinalPlay ? \"square finalPlay\" : \"square\"} onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n    renderSquare(i) {\n        return (\n            <Square\n                key={i}\n                col={i % BOARD_SIZE + 1}\n                row={Math.floor(i / BOARD_SIZE) + 1}\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                finalPlay={this.props.finalPlay}\n            />\n        );\n    }\n\n    render() {\n        const squares = Array(BOARD_SIZE).fill(0).map((eachValue, index) => {\n            const subSquares = Array(BOARD_SIZE).fill(0).map((eachSubValue, subIndex) => {\n                return this.renderSquare(index * BOARD_SIZE + subIndex);\n            });\n            return (\n                <div key={index} className=\"board-row\">\n                    {subSquares}\n                </div>\n            );\n        });\n        return (\n            <div>\n                {squares}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{\n                squares: Array(BOARD_SIZE*BOARD_SIZE).fill(null),\n                selectedCol: null,\n                selectedRow: null,\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n            historyIsAsc: true,\n        };\n    }\n\n    static getNextPlayer(xIsNext) {\n        return xIsNext ? 'X' : 'O';\n    }\n\n    calculateWinner(squares) {\n        const horizontalLines = Array(BOARD_SIZE).fill(0).map((eachValue, index) => {\n            return Array(BOARD_SIZE).fill(0).map((eachSubValue, subIndex) => {\n                return index * BOARD_SIZE + subIndex;\n            });\n        });\n        const verticalLines = Array(BOARD_SIZE).fill(0).map((eachValue, index) => {\n            return Array(BOARD_SIZE).fill(0).map((eachSubValue, subIndex) => {\n                return index + (subIndex * BOARD_SIZE);\n            });\n        });\n        const crossLines = Array(2).fill(0).map((eachValue, index) => {\n            return Array(BOARD_SIZE).fill(0).map((eachSubValue, subIndex) => {\n                return index * (BOARD_SIZE - 1) + (BOARD_SIZE + (-2 * index + 1)) * subIndex;\n            });\n        });\n        const lines = [...horizontalLines, ...verticalLines, ...crossLines];\n        let judge = null;\n        lines.forEach(eachLine => {\n            const cellIsFilled = squares[eachLine[0]] != null;\n            const targetCell = squares[eachLine[0]];\n            const filteredLines = eachLine.filter(eachCell => squares[eachCell] !== targetCell);\n            const allCellIsSame = filteredLines.length === 0;\n            if (cellIsFilled && allCellIsSame) {\n                judge = squares[eachLine[0]];\n            }\n        });\n        if (judge == null && squares.every(eachValue => eachValue != null)) {\n            return 'draw';\n        }\n        return judge;\n    }\n\n    getAvoidNumber(squares, clickableSquares) {\n        const horizontalLines = Array(BOARD_SIZE).fill(0).map((eachValue, index) => {\n            return Array(BOARD_SIZE).fill(0).map((eachSubValue, subIndex) => {\n                return index * BOARD_SIZE + subIndex;\n            });\n        });\n        const verticalLines = Array(BOARD_SIZE).fill(0).map((eachValue, index) => {\n            return Array(BOARD_SIZE).fill(0).map((eachSubValue, subIndex) => {\n                return index + (subIndex * BOARD_SIZE);\n            });\n        });\n        const crossLines = Array(2).fill(0).map((eachValue, index) => {\n            return Array(BOARD_SIZE).fill(0).map((eachSubValue, subIndex) => {\n                return index * (BOARD_SIZE - 1) + (BOARD_SIZE + (-2 * index + 1)) * subIndex;\n            });\n        });\n        const lines = [...horizontalLines, ...verticalLines, ...crossLines];\n        let judge = null;\n        lines.forEach(eachLine => {\n            let targetCell = null;\n            eachLine.forEach(eachCell => {\n                if (squares[eachCell] != null) {\n                    targetCell = squares[eachCell];\n                }\n            });\n            if (targetCell != null) {\n                const filteredLines = eachLine.filter(eachCell => squares[eachCell] !== targetCell);\n                if (filteredLines.length === 1) {\n                    if (clickableSquares.includes(filteredLines[0])) {\n                        judge = filteredLines[0];\n                    }\n                }\n            }\n        });\n        return judge;\n    }\n\n    computedPlay() {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (this.calculateWinner(squares)) {\n            return;\n        }\n        const clickableSquares = squares.map((square, index) => !square ? index : null).filter(square => square);\n        const avoidClickNumber = this.getAvoidNumber(squares, clickableSquares);\n        const clickNumber =\n            avoidClickNumber != null ?\n                avoidClickNumber : clickableSquares[Math.floor(Math.random() * clickableSquares.length)];\n\n        squares[clickNumber] = Game.getNextPlayer(this.state.xIsNext);\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                selectedCol: clickNumber % BOARD_SIZE + 1,\n                selectedRow: Math.floor(clickNumber / BOARD_SIZE) + 1,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n        if (this.calculateWinner(squares) || squares[i]) {\n            return;\n        }\n        squares[i] = Game.getNextPlayer(this.state.xIsNext);\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                selectedCol: i % BOARD_SIZE + 1,\n                selectedRow: Math.floor(i / BOARD_SIZE) + 1,\n            }]),\n            stepNumber: history.length,\n            xIsNext: !this.state.xIsNext,\n        });\n        setTimeout(() => {\n            if (!this.state.xIsNext) {\n                this.computedPlay();\n            }\n        }, 1000);\n    }\n\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n        });\n    }\n\n    toggleHistory() {\n        this.setState({\n            historyIsAsc: !this.state.historyIsAsc,\n        });\n    }\n\n    resetGame() {\n        this.setState({\n            history: [{\n                squares: Array(BOARD_SIZE*BOARD_SIZE).fill(null),\n                selectedCol: null,\n                selectedRow: null,\n            }],\n            stepNumber: 0,\n            xIsNext: true,\n            historyIsAsc: true,\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = this.calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            const { selectedCol, selectedRow } = step;\n            const desc =\n                move > 0 ?\n                    `Go to move # ${move} (${selectedCol}, ${selectedRow}, ${Game.getNextPlayer((move % 2) !== 0)})` :\n                    'Go to game start';\n            return (\n                <li key={move}>\n                    <button\n                        className={this.state.stepNumber === move ? 'currentHistory' : ''}\n                        onClick={() => this.jumpTo(move)}\n                    >\n                        {desc}\n                    </button>\n                </li>\n            );\n        });\n\n        const sortedMoves = this.state.historyIsAsc ? moves : moves.reverse();\n\n        let finalPlay = null;\n        let status = '';\n        if (winner == null) {\n            status = `Next player: ${Game.getNextPlayer(this.state.xIsNext)}`;\n        } else if (winner === 'draw') {\n            status = 'draw';\n        } else {\n            status = `Winner: ${winner}`;\n            finalPlay = current;\n        }\n\n        return (\n            <div className=\"main-board\">\n                <div className=\"button-wrapper\">\n                    <button className=\"button\" onClick={() => this.resetGame()}>リセット</button>\n                    <button className=\"button\" onClick={() => this.toggleHistory()}>\n                        履歴をソート\n                    </button>\n                </div>\n                <div className=\"game\">\n                    <div className=\"game-board\">\n                        <Board\n                            squares={current.squares}\n                            onClick={(i) => this.handleClick(i)}\n                            finalPlay={finalPlay}\n                        />\n                    </div>\n                    <div className=\"game-info\">\n                        <div>{status}</div>\n                        <ol>{sortedMoves}</ol>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}